{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nconst CelestialBodyManipulator = () => {\n  _s();\n  useEffect(() => {\n    // Scene\n    const scene = new THREE.Scene();\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Celestial Body\n    const celestialBodyGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const celestialBodyMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffff00\n    });\n    const celestialBody = new THREE.Mesh(celestialBodyGeometry, celestialBodyMaterial);\n    scene.add(celestialBody);\n\n    // Animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotate the celestial body\n      celestialBody.rotation.x += 0.01;\n      celestialBody.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = window.innerWidth;\n      const newHeight = window.innerHeight;\n      camera.aspect = newWidth / newHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(newWidth, newHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return null;\n};\n_s(CelestialBodyManipulator, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = CelestialBodyManipulator;\nexport default CelestialBodyManipulator;\nvar _c;\n$RefreshReg$(_c, \"CelestialBodyManipulator\");","map":{"version":3,"names":["React","useEffect","THREE","CelestialBodyManipulator","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","celestialBodyGeometry","SphereGeometry","celestialBodyMaterial","MeshBasicMaterial","color","celestialBody","Mesh","add","animate","requestAnimationFrame","rotation","x","y","render","handleResize","newWidth","newHeight","aspect","updateProjectionMatrix","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["/home/remon/바탕화면/telescope_server/SW_Festival/src/components/CelestialSphere.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst CelestialBodyManipulator = () => {\n  useEffect(() => {\n    // Scene\n    const scene = new THREE.Scene();\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Celestial Body\n    const celestialBodyGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const celestialBodyMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });\n    const celestialBody = new THREE.Mesh(celestialBodyGeometry, celestialBodyMaterial);\n    scene.add(celestialBody);\n\n    // Animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Rotate the celestial body\n      celestialBody.rotation.x += 0.01;\n      celestialBody.rotation.y += 0.01;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      const newWidth = window.innerWidth;\n      const newHeight = window.innerHeight;\n\n      camera.aspect = newWidth / newHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(newWidth, newHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return null;\n};\n\nexport default CelestialBodyManipulator;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrCH,SAAS,CAAC,MAAM;IACd;IACA,MAAMI,KAAK,GAAG,IAAIH,KAAK,CAACI,KAAK,CAAC,CAAC;;IAE/B;IACA,MAAMC,MAAM,GAAG,IAAIL,KAAK,CAACM,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjGJ,MAAM,CAACK,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAACP,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDM,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;;IAE9C;IACA,MAAMC,qBAAqB,GAAG,IAAInB,KAAK,CAACoB,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IACjE,MAAMC,qBAAqB,GAAG,IAAIrB,KAAK,CAACsB,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC9E,MAAMC,aAAa,GAAG,IAAIxB,KAAK,CAACyB,IAAI,CAACN,qBAAqB,EAAEE,qBAAqB,CAAC;IAClFlB,KAAK,CAACuB,GAAG,CAACF,aAAa,CAAC;;IAExB;IACA,MAAMG,OAAO,GAAGA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;;MAE9B;MACAH,aAAa,CAACK,QAAQ,CAACC,CAAC,IAAI,IAAI;MAChCN,aAAa,CAACK,QAAQ,CAACE,CAAC,IAAI,IAAI;MAEhCnB,QAAQ,CAACoB,MAAM,CAAC7B,KAAK,EAAEE,MAAM,CAAC;IAChC,CAAC;IAEDsB,OAAO,CAAC,CAAC;;IAET;IACA,MAAMM,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,QAAQ,GAAG3B,MAAM,CAACC,UAAU;MAClC,MAAM2B,SAAS,GAAG5B,MAAM,CAACE,WAAW;MAEpCJ,MAAM,CAAC+B,MAAM,GAAGF,QAAQ,GAAGC,SAAS;MACpC9B,MAAM,CAACgC,sBAAsB,CAAC,CAAC;MAE/BzB,QAAQ,CAACE,OAAO,CAACoB,QAAQ,EAAEC,SAAS,CAAC;IACvC,CAAC;IAED5B,MAAM,CAAC+B,gBAAgB,CAAC,QAAQ,EAAEL,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACX1B,MAAM,CAACgC,mBAAmB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAAC/B,EAAA,CArDID,wBAAwB;AAAAuC,EAAA,GAAxBvC,wBAAwB;AAuD9B,eAAeA,wBAAwB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}