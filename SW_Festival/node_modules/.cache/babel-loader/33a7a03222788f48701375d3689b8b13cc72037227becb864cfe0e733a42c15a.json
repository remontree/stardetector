{"ast":null,"code":"import { FileLoader, Loader, ShapePath } from 'three';\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      const font = scope.parse(JSON.parse(text));\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n  parse(json) {\n    return new Font(json);\n  }\n}\n\n//\n\nclass Font {\n  constructor(data) {\n    this.isFont = true;\n    this.type = 'Font';\n    this.data = data;\n  }\n  generateShapes(text, size = 100) {\n    const shapes = [];\n    const paths = createPaths(text, size, this.data);\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      shapes.push(...paths[p].toShapes());\n    }\n    return shapes;\n  }\n}\nfunction createPaths(text, size, data) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n    offsetY = 0;\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n      offsetX += ret.offsetX;\n      paths.push(ret.path);\n    }\n  }\n  return paths;\n}\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n      switch (action) {\n        case 'm':\n          // moveTo\n\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n        case 'l':\n          // lineTo\n\n          x = outline[i++] * scale + offsetX;\n          y = outline[i++] * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n        case 'q':\n          // quadraticCurveTo\n\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n        case 'b':\n          // bezierCurveTo\n\n          cpx = outline[i++] * scale + offsetX;\n          cpy = outline[i++] * scale + offsetY;\n          cpx1 = outline[i++] * scale + offsetX;\n          cpy1 = outline[i++] * scale + offsetY;\n          cpx2 = outline[i++] * scale + offsetX;\n          cpy2 = outline[i++] * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\nexport { FontLoader, Font };","map":{"version":3,"names":["FileLoader","Loader","ShapePath","FontLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","font","parse","JSON","json","Font","data","isFont","type","generateShapes","size","shapes","paths","createPaths","p","pl","length","push","toShapes","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["/home/remon/바탕화면/telescope_server/node_modules/three/examples/jsm/loaders/FontLoader.js"],"sourcesContent":["import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}