{"ast":null,"code":"var _jsxFileName = \"/home/remon/\\uBC14\\uD0D5\\uD654\\uBA74/telescope_server/SW_Festival/src/components/StarChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RotatingSphere() {\n  _s();\n  const canvasRef = useRef(null);\n  const previousMousePosition = useRef({\n    x: 0,\n    y: 0\n  });\n  const isDragging = useRef(false);\n  const scale = useRef(1);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    // Scene\n    const scene = new THREE.Scene();\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, 0, 0.6, 1000);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n    renderer.setSize(canvas.clientWidth, canvas.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n\n    // Geometry\n    const geometry = new THREE.SphereGeometry(100, 32, 32);\n\n    // Material\n    const material = new THREE.MeshBasicMaterial({\n      color: 'lightblue',\n      wireframe: true\n    });\n\n    // Mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Mouse events\n    function handleMouseDown(event) {\n      isDragging.current = true;\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }\n    function handleMouseUp(event) {\n      isDragging.current = false;\n    }\n    function handleMouseMove(event) {\n      if (!isDragging.current) return;\n      const {\n        clientX,\n        clientY\n      } = event;\n      const delta = {\n        x: clientX - previousMousePosition.current.x,\n        y: clientY - previousMousePosition.current.y\n      };\n      mesh.rotation.x += delta.y * 0.01;\n      mesh.rotation.y += delta.x * 0.01;\n      previousMousePosition.current = {\n        x: clientX,\n        y: clientY\n      };\n    }\n    function handleMouseWheel(event) {\n      const delta = Math.sign(event.deltaY);\n      scale.current += delta * 0.1;\n      scale.current = Math.max(scale.current, 0.1);\n      mesh.scale.set(scale.current, scale.current, scale.current);\n    }\n\n    // Event listeners\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('wheel', handleMouseWheel);\n\n    // Add red sphere function\n    function addRedSphere(x, y, z, radius) {\n      const redSphereGeometry = new THREE.SphereGeometry(radius, 32, 32);\n      const redSphereMaterial = new THREE.MeshBasicMaterial({\n        color: 'red'\n      });\n      const redSphere = new THREE.Mesh(redSphereGeometry, redSphereMaterial);\n      redSphere.position.set(x, y, z);\n      mesh.add(redSphere);\n    }\n\n    // Usage: addRedSphere(x, y, z, radius);\n    addRedSphere(100, 0, 0, 10);\n\n    // Resize handler\n    function handleResize() {\n      const {\n        clientWidth,\n        clientHeight\n      } = canvas.parentElement;\n      canvas.width = clientWidth;\n      canvas.height = clientHeight;\n      camera.aspect = clientWidth / clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(clientWidth, clientHeight);\n    }\n    window.addEventListener('resize', handleResize);\n\n    // Animation\n    function animate() {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n    animate();\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('wheel', handleMouseWheel);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n}\n_s(RotatingSphere, \"Axzpsv9XLAUJZZI0jgjh11OWHIY=\");\n_c = RotatingSphere;\nvar _c;\n$RefreshReg$(_c, \"RotatingSphere\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","RotatingSphere","_s","canvasRef","previousMousePosition","x","y","isDragging","scale","canvas","current","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","setSize","clientWidth","clientHeight","setClearColor","geometry","SphereGeometry","material","MeshBasicMaterial","color","wireframe","mesh","Mesh","add","handleMouseDown","event","clientX","clientY","handleMouseUp","handleMouseMove","delta","rotation","handleMouseWheel","Math","sign","deltaY","max","set","addEventListener","addRedSphere","z","radius","redSphereGeometry","redSphereMaterial","redSphere","position","handleResize","parentElement","width","height","aspect","updateProjectionMatrix","window","animate","requestAnimationFrame","render","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/remon/바탕화면/telescope_server/SW_Festival/src/components/StarChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nexport default function RotatingSphere() {\n  const canvasRef = useRef(null);\n  const previousMousePosition = useRef({ x: 0, y: 0 });\n  const isDragging = useRef(false);\n  const scale = useRef(1);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    // Scene\n    const scene = new THREE.Scene();\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(75, 0, 0.6, 1000);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({ canvas });\n    renderer.setSize(canvas.clientWidth, canvas.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n\n    // Geometry\n    const geometry = new THREE.SphereGeometry(100, 32, 32);\n\n    // Material\n    const material = new THREE.MeshBasicMaterial({ color: 'lightblue', wireframe: true });\n\n    // Mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    // Mouse events\n    function handleMouseDown(event) {\n      isDragging.current = true;\n      previousMousePosition.current = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n    }\n\n    function handleMouseUp(event) {\n      isDragging.current = false;\n    }\n\n    function handleMouseMove(event) {\n      if (!isDragging.current) return;\n\n      const { clientX, clientY } = event;\n      const delta = {\n        x: clientX - previousMousePosition.current.x,\n        y: clientY - previousMousePosition.current.y,\n      };\n\n      mesh.rotation.x += delta.y * 0.01;\n      mesh.rotation.y += delta.x * 0.01;\n\n      previousMousePosition.current = {\n        x: clientX,\n        y: clientY,\n      };\n    }\n\n    function handleMouseWheel(event) {\n      const delta = Math.sign(event.deltaY);\n\n      scale.current += delta * 0.1;\n      scale.current = Math.max(scale.current, 0.1);\n\n      mesh.scale.set(scale.current, scale.current, scale.current);\n    }\n\n    // Event listeners\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('wheel', handleMouseWheel);\n\n    // Add red sphere function\n    function addRedSphere(x, y, z, radius) {\n      const redSphereGeometry = new THREE.SphereGeometry(radius, 32, 32);\n      const redSphereMaterial = new THREE.MeshBasicMaterial({ color: 'red' });\n      const redSphere = new THREE.Mesh(redSphereGeometry, redSphereMaterial);\n      redSphere.position.set(x, y, z);\n      mesh.add(redSphere);\n    }\n\n    // Usage: addRedSphere(x, y, z, radius);\n    addRedSphere(100, 0, 0, 10);\n\n    // Resize handler\n    function handleResize() {\n      const { clientWidth, clientHeight } = canvas.parentElement;\n      canvas.width = clientWidth;\n      canvas.height = clientHeight;\n      camera.aspect = clientWidth / clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(clientWidth, clientHeight);\n    }\n\n    window.addEventListener('resize', handleResize);\n\n    // Animation\n    function animate() {\n      requestAnimationFrame(animate);\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('wheel', handleMouseWheel);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} />;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}